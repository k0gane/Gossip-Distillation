# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import federated_pb2 as federated__pb2


class ModelSenderStub(object):
  """前提...clientからserverに送信して、その結果をclientに送り返す
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InitDevice = channel.stream_stream(
        '/ModelSender/InitDevice',
        request_serializer=federated__pb2.AnyString.SerializeToString,
        response_deserializer=federated__pb2.AnyString.FromString,
        )
    self.IsEnoughClient = channel.stream_stream(
        '/ModelSender/IsEnoughClient',
        request_serializer=federated__pb2.AnyString.SerializeToString,
        response_deserializer=federated__pb2.Flag.FromString,
        )
    self.SendModel = channel.stream_stream(
        '/ModelSender/SendModel',
        request_serializer=federated__pb2.Flag.SerializeToString,
        response_deserializer=federated__pb2.Model.FromString,
        )
    self.ReturnModel = channel.stream_stream(
        '/ModelSender/ReturnModel',
        request_serializer=federated__pb2.Model.SerializeToString,
        response_deserializer=federated__pb2.Result.FromString,
        )
    self.IsEnoughModel = channel.stream_stream(
        '/ModelSender/IsEnoughModel',
        request_serializer=federated__pb2.Timing.SerializeToString,
        response_deserializer=federated__pb2.Flag.FromString,
        )
    self.FederatedModel = channel.stream_stream(
        '/ModelSender/FederatedModel',
        request_serializer=federated__pb2.Flag.SerializeToString,
        response_deserializer=federated__pb2.Result.FromString,
        )
    self.FinishAction = channel.stream_stream(
        '/ModelSender/FinishAction',
        request_serializer=federated__pb2.AnyString.SerializeToString,
        response_deserializer=federated__pb2.AnyString.FromString,
        )


class ModelSenderServicer(object):
  """前提...clientからserverに送信して、その結果をclientに送り返す
  """

  def InitDevice(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsEnoughClient(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendModel(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReturnModel(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def IsEnoughModel(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FederatedModel(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FinishAction(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ModelSenderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InitDevice': grpc.stream_stream_rpc_method_handler(
          servicer.InitDevice,
          request_deserializer=federated__pb2.AnyString.FromString,
          response_serializer=federated__pb2.AnyString.SerializeToString,
      ),
      'IsEnoughClient': grpc.stream_stream_rpc_method_handler(
          servicer.IsEnoughClient,
          request_deserializer=federated__pb2.AnyString.FromString,
          response_serializer=federated__pb2.Flag.SerializeToString,
      ),
      'SendModel': grpc.stream_stream_rpc_method_handler(
          servicer.SendModel,
          request_deserializer=federated__pb2.Flag.FromString,
          response_serializer=federated__pb2.Model.SerializeToString,
      ),
      'ReturnModel': grpc.stream_stream_rpc_method_handler(
          servicer.ReturnModel,
          request_deserializer=federated__pb2.Model.FromString,
          response_serializer=federated__pb2.Result.SerializeToString,
      ),
      'IsEnoughModel': grpc.stream_stream_rpc_method_handler(
          servicer.IsEnoughModel,
          request_deserializer=federated__pb2.Timing.FromString,
          response_serializer=federated__pb2.Flag.SerializeToString,
      ),
      'FederatedModel': grpc.stream_stream_rpc_method_handler(
          servicer.FederatedModel,
          request_deserializer=federated__pb2.Flag.FromString,
          response_serializer=federated__pb2.Result.SerializeToString,
      ),
      'FinishAction': grpc.stream_stream_rpc_method_handler(
          servicer.FinishAction,
          request_deserializer=federated__pb2.AnyString.FromString,
          response_serializer=federated__pb2.AnyString.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ModelSender', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
